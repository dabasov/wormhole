pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

contract AvatarNFT is ERC721 {
    mapping (uint256 => string) tokenURIs;
    constructor(string memory name_, string memory symbol_) ERC721(name_, symbol_) {
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address _to, uint256 _tokenId, string memory _tokenURI) public virtual {
        if (bytes(_tokenURI).length > 0) {
            tokenURIs[_tokenId] = _tokenURI;
        }
        _safeMint(_to, _tokenId);
    }
    
    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
        require(_exists(_tokenId), "ERC721Metadata: URI query for nonexistent token");

        return tokenURIs[_tokenId];
    }
    
    function burn(uint256 _tokenId) public virtual {
        delete tokenURIs[_tokenId];
        
        _burn(_tokenId);
    }

}
